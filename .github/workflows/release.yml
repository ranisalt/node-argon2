name: Release

on:
  release:
    types: [published]

env:
  npm_config_build_from_source: true

jobs:
  publish:
    name: Publish package
    runs-on: ubuntu-20.04

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        cache: yarn
        node-version: 18

    - name: Install dependencies
      run: yarn install

    - name: Publish to NPM
      run: yarn publish
      if: ${{ !env.ACT }}
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  build:
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-11, macos-m1, windows-2019]

    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Use Node.js 18
      uses: actions/setup-node@v4
      with:
        cache: yarn
        node-version: 18

    - name: Install dependencies
      run: yarn install

    - name: Package artifacts
      run: yarn node-pre-gyp package

    - name: Upload to Release
      uses: csexton/release-asset-action@v2
      if: ${{ !env.ACT }}
      with:
        pattern: build/stage/**/argon2*.tar.gz
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-url: ${{ github.event.release.upload_url }}

  build-alpine:
    name: Build on Alpine Linux
    runs-on: ubuntu-latest
    container:
      image: node:18-alpine

    steps:
      - name: Install build deps
        run: apk add make g++ python3 git

      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: yarn install

      - name: Package artifacts
        run: yarn node-pre-gyp package

      - name: Upload to Release
        uses: csexton/release-asset-action@v2
        if: ${{ !env.ACT }}
        with:
          pattern: build/stage/**/argon2*.tar.gz
          github-token: ${{ secrets.GITHUB_TOKEN }}
          release-url: ${{ github.event.release.upload_url }}

  build-arm:
    strategy:
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu20.04
          - arch: aarch64
            distro: alpine_latest

    name: Build on arm64
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: true

    - name: Package artifacts
      uses: uraimo/run-on-arch-action@v2
      id: build
      with:
        arch: ${{ matrix.arch }}
        distro: ${{ matrix.distro }}
        setup: mkdir -p "${PWD}/artifacts"
        dockerRunArgs: --volume "${PWD}:/repo"
        env: |
          npm_config_build_from_source: true
        install: |
          case "${{ matrix.distro }}" in
            ubuntu*)
              apt update -q && apt install -yq curl make g++ python
              curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
              ;;
            alpine*)
              apk add --update make g++ python3
              apk add --no-cache --repository https://dl-cdn.alpinelinux.org/alpine/v3.17/main/ nodejs~=18 npm
              ;;
          esac
          corepack enable

        run: |
          cd /repo
          yarn install --frozen-lockfile
          yarn node-pre-gyp package

    - name: Upload to Release
      uses: csexton/release-asset-action@v2
      if: ${{ !env.ACT }}
      with:
        pattern: build/stage/**/argon2*.tar.gz
        github-token: ${{ secrets.GITHUB_TOKEN }}
        release-url: ${{ github.event.release.upload_url }}

  build-freebsd:
    name: Build on FreeBSD
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Package artifacts
        uses: vmactions/freebsd-vm@v1
        with:
          envs: 'npm_config_build_from_source'
          prepare: |
            pkg install -y gmake python3 yarn-node18
          run: |
            yarn install --frozen-lockfile
            yarn node-pre-gyp package
          sync: sshfs

      - name: Upload to Release
        uses: csexton/release-asset-action@v2
        if: ${{ !env.ACT }}
        with:
          pattern: build/stage/**/argon2*.tar.gz
          github-token: ${{ secrets.GITHUB_TOKEN }}
          release-url: ${{ github.event.release.upload_url }}
