'use strict'
const crypto = require('crypto')
const bindings = require('bindings')('argon2')
const Promise = require('any-promise')

const argon2d = 0
const argon2i = 1
const argon2id = 2

const defaults = Object.freeze({
  hashLength: 32,
  timeCost: 3,
  memoryCost: 12,
  parallelism: 1,
  type: argon2i
})

const limits = Object.freeze(bindings.limits)

const validate = (salt, options) => new Promise((resolve, reject) => {
  if (salt.length < 8) {
    reject(new Error('Invalid salt, must be a buffer with 8 or more bytes.'))
  }

  for (let key of Object.keys(limits)) {
    const max = limits[key].max
    const min = limits[key].min
    const value = options[key]
    if (value > max || value < min) {
      reject(new Error(`Invalid ${key}, must be between ${min} and ${max}.`))
    }
  }

  resolve()
})

module.exports = {
  defaults,
  limits,
  argon2d,
  argon2i,
  argon2id,

  hash(plain, salt, options) {
    salt = new Buffer(salt)
    options = Object.assign({}, defaults, options)

    return validate(salt, options).then(() => new Promise((resolve, reject) => {
      bindings.hash(new Buffer(plain), salt, options, resolve, reject)
    }))
  },

  generateSalt(length) {
    return new Promise((resolve, reject) => {
      crypto.randomBytes(length || 16, (err, salt) => {
        /* istanbul ignore if */
        if (err) {
          reject(err)
        }
        resolve(salt)
      })
    })
  },

  verify(hash, plain) {
    if (!/^\$argon2(i|d|id)(\$v=\d+)?\$m=\d+,t=\d+,p=\d+(?:\$[\w+/]+){2}$/.test(hash)) {
      return Promise.reject(new Error('Invalid hash, must be generated by Argon2.'))
    }

    return new Promise((resolve, reject) => {
      bindings.verify(new Buffer(hash), new Buffer(plain), resolve, reject)
    })
  }
}
